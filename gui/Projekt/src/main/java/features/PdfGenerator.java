package main.java.features;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.sun.scenario.effect.ImageData;
import javafx.collections.ObservableList;
import javafx.scene.control.Cell;
import main.java.dao.PackagesDAO;
import main.java.entity.PackagesDTO;
import main.java.entity.PdfDTO;

public class PdfGenerator {
    private static String FILE = "D:/sample.pdf";

    public static void createPdf() throws IOException, DocumentException {
        File file = new File(FILE);
        file.getParentFile().mkdirs();
        new PdfGenerator().fillPdf(FILE);
    }

    public void fillPdf(String dest) throws IOException, DocumentException {
        Font font = new Font(Font.FontFamily.HELVETICA, 13, Font.BOLD, GrayColor.GRAYWHITE);
        BaseFont baseFont = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1250, BaseFont.CACHED);
        Font tableFont = new Font(baseFont);

        Document document = new Document(PageSize.A4.rotate());
        PdfWriter.getInstance(document, new FileOutputStream(dest));
        document.open();

        PdfPTable mainTable = new PdfPTable(2);
        mainTable.setWidthPercentage(100);

        Image image = Image.getInstance("src/main/resources/images/outbox_black.png");
        image.scaleAbsolute(100, 100);

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date now = new Date();

        Paragraph paragraph = new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + "\n" + simpleDateFormat.format(now),
                tableFont);
        
        paragraph.setAlignment(Paragraph.ALIGN_BOTTOM);
        mainTable.addCell(new PdfPCell(image));
        mainTable.addCell(paragraph);
        document.add(mainTable);

        float[] columnWidths = {1, 5, 5, 5, 5, 5};
        PdfPTable table = new PdfPTable(columnWidths);
        table.setWidthPercentage(100);
        table.getDefaultCell().setUseAscender(true);
        table.getDefaultCell().setUseDescender(true);


        table.addCell(createCell("#", font));
        table.addCell(createCell("Package number", font));
        table.addCell(createCell("Size", font));
        table.addCell(createCell("City", font));
        table.addCell(createCell("Voivodeship", font));
        table.addCell(createCell("Date", font));
        table.getDefaultCell().setBackgroundColor(new GrayColor(0.75f));


        table.setHeaderRows(1);
        ObservableList<PdfDTO> list = PackagesDAO.readPackagesForPdf();
        table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        for (int counter = 0; counter < list.size(); counter++) {
            if (counter % 2 == 1){
                table.getDefaultCell().setBackgroundColor(GrayColor.GRAYWHITE);
            }else{
                table.getDefaultCell().setBackgroundColor(GrayColor.LIGHT_GRAY);
            }
            table.addCell(String.valueOf(counter + 1));
            table.addCell(new Phrase(list.get(counter).getPackageNumber(), tableFont));
            table.addCell(new Phrase(list.get(counter).getSize(), tableFont));
            table.addCell(new Phrase(list.get(counter).getCity(), tableFont));
            table.addCell(new Phrase(list.get(counter).getVoivodeship(), tableFont));
            table.addCell(new Phrase(simpleDateFormat.format(list.get(counter).getDate()), tableFont));

        }
        document.add(table);
        document.close();
    }

    private PdfPCell createCell(String text, Font font){
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setBackgroundColor(GrayColor.GRAYBLACK);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        return cell;
    }
}